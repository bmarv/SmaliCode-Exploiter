import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

public class SmaliData {
	List<String> existingSmaliFiles;
	public HashMap<String, SmaliFile> smaliElement = new HashMap<String, SmaliFile>();
	Path location;
	
	//constructor
	SmaliData(Path location){
		this.location = location;
		this.existingSmaliFiles = findSmaliFiles(location);
			try {
				this.smaliElement = saveContent(location, findSmaliFiles(location));
			} catch (IOException e) {
				e.printStackTrace();
			}
		
	}
	
	//methods
	/**	searches for .smali -files withing the current directory
		@return List of String with Filenames
	 */
	public List<String> findSmaliFiles(Path location) {
		List<String> smaliFiles = new ArrayList<String>();
		if(location.toFile().isDirectory()) {
			smaliFiles = Arrays.asList(location.toFile().list()); 
		} else {
			System.out.println("This is not a directory!");
		}
		return smaliFiles;
	}
	
	/** saves all Content of the folder in HashMaps
		@return Map of String: Filename to corresponding File
	 */
	public HashMap<String, SmaliFile> saveContent(Path currLocation, List<String> existingFiles) throws IOException{
		HashMap<String, SmaliFile> smaliEl = new HashMap<String, SmaliFile>();
		Path forFile= null;
		if(!currLocation.toFile().isDirectory())
			System.out.println("currlocation is not a directory");
		else {
			for(String currFile: existingFiles) {
				forFile= Paths.get(currLocation.toString()+"/"+currFile);
				if(forFile.toFile().exists()) {
					String text = new String(Files.readAllBytes(forFile));
					SmaliFile element = new SmaliFile();
					element.setContent(text);
					element.setPath(forFile);
					smaliEl.put(currFile, element);
				}
			}
		}
		
		return smaliEl;
	}
	
	/** search for specific file given the path
		@return Filename of the >>saveContent smali-File
	 */
	public String getSpecificSmaliFile(String file) {
		Path currlocation = Paths.get(this.location+"/"+file);
		if(currlocation.toFile().exists()) {
			return smaliElement.get(file).toString();
		}
		
		return null;
	}
	
	/** printing-Method for showing all found .smali-Classes
	 */
	public String toString() {
		String result = "\n---Reading Smali-Classes - content is stored in SmaliData---\n"
				+this.existingSmaliFiles.toString();
		return result;
	}
}
