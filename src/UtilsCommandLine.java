import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;



public class UtilsCommandLine {
	public boolean isWindows;
	public String cmd;
	public String filesystem;
	ProcessBuilder pb;
	String FileSeparator;
	public File resultDirectory;

	
	UtilsCommandLine(){
		this.isWindows = System.getProperty("os.name")
	  			  .toLowerCase().startsWith("windows");
	  	if (this.isWindows) {
	  		this.cmd = "cmd.exe";
	  		this.filesystem = "/c";
	  	} else {
	  		this.cmd = "bash";
	  		this.filesystem = "-c";
	  	}
	  	// MAC is Unix, so is should be the same like Linux!??
	  	this.pb = new ProcessBuilder();
		this.FileSeparator = System.getProperty("file.separator");
	}
	
	public boolean CreateDecompiledAPK(File sourceDirectory ,File apk) throws IOException {
		
		if (! this.testPrerequisites()) {
			System.out.println("apktool is required to be installed! Please install this on your machine"
					+ "For linus open Terminal and enter sudo apt install apktool");
			return false;
		}
		String name = apk.getName();
		String name_wo_apk = name.replace(".apk","");
		String target_dir_name = "decompiled";

		this.resultDirectory = createDirectory(sourceDirectory, target_dir_name);
		
		if (! this.decompileAPK(sourceDirectory, name, name_wo_apk, target_dir_name)) {
			System.out.println("Error while decompiling with APK-tools");
			return false;
		}		
		return true;
	}
	
	public boolean testPrerequisites() {
		int exitCode = 1;
		this.pb.command(this.cmd, this.filesystem, "apktool --version");
		try {
            Process process = pb.start();

			// blocked :(
            BufferedReader reader =
                    new BufferedReader(new InputStreamReader(process.getInputStream()));

            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }

            exitCode = process.waitFor();
            System.out.println("\nExited with error code : " + exitCode);

        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
		return (exitCode==0);
	}
	
	public boolean decompileAPK(File sourceDirectory, String name, String name_wo_apk, String target_directory_name) {
		int exitCode = 1;
        this.pb.command(this.cmd, this.filesystem, "apktool d -f -o ." + this.FileSeparator + target_directory_name + this.FileSeparator + name_wo_apk + " " + name);
        this.pb.directory(sourceDirectory);
        
        try {

            Process process = pb.start();

			// blocked :(
            BufferedReader reader =
                    new BufferedReader(new InputStreamReader(process.getInputStream()));

            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }

            exitCode = process.waitFor();
            System.out.println("\nExited with error code : " + exitCode);

        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
		
		return (exitCode==0);
	}
	
	public File createDirectory(File directory, String name) throws IOException {
		File new_dir;
		new_dir = new File(directory.getPath() + this.FileSeparator + name);
		System.out.println(new_dir.toPath());
		if (new_dir.mkdir()) {
			System.out.println("successfull created directory " + new_dir.toPath());
		} else {
			System.out.println("directory already existed");
		}
		return new_dir;
	}
	
	public static List<File> listAPKFilesForFolder(File folder) {
		List<File> apksList = new ArrayList<File>();
        boolean isApk = false;
        int i = 0 ;
	    for (final File fileEntry : folder.listFiles()) {
	        System.out.println(fileEntry.getName());
	        i = fileEntry.getName().lastIndexOf('.');
	        isApk = false;
	        if (i > 0) {
	            String extension = fileEntry.getName().substring(i+1);
	            if (extension.equals("apk")) {
	            	isApk = true;
	            }
	        }
	        if (isApk) {
		        apksList.add(fileEntry);
	        }
	    }
		return apksList;
	}

	
}
