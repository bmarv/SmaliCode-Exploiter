import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.InvalidPathException;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
	author:
	Marvin Beese
	Jan Christoph Glinzer
 */
public class SmaliExploiter {

	public static void main(String[] args) throws IOException {
		run_main(args);
	}
	
	public static void run_main(String args[]) throws IOException{
		// We expect to receive as args parameter a path to the directory with apk-files
		File sourceDirectory = null;
		try {
			sourceDirectory = new File(args[0]);
		} catch (InvalidPathException e) {
			System.out.println("Expected Path to directory with apk files.");
            e.printStackTrace();
        } catch (IndexOutOfBoundsException e) {
        	System.out.println("Please enter the Path to directory with apk files as arg-Argument");
        }
		
		if (! sourceDirectory.isDirectory()) {
			System.out.println("a file is expected that contains apk-files");
			throw new InvalidPathException ("Directory expected", null);
		}	
		
		System.out.println("---Decompiling APK-Files with apktool---");

		List<File> apks = UtilsCommandLine.listAPKFilesForFolder(sourceDirectory);
		UtilsCommandLine uCL = new UtilsCommandLine();

		String error_messages = "";
		for (File apk : apks) {
			if (!uCL.createDecompiledAPK(sourceDirectory, apk)) {
				error_messages.concat("Decompiling " + apk.getName() +
						" failed.");
			}
		
		if (error_messages.equals("")) {
			error_messages = "---You compiled all apk-files successfully! Congratulations!---";
		}
		System.out.println(error_messages);
		File resultDirectory = uCL.resultDirectory;
		String apkName = uCL.apkName;
		
		
		//for each entry read infos
		HashMap<String, ApkFiles> Apks = new HashMap<String, ApkFiles>();
		File[] decompList = resultDirectory.listFiles();
		for(File currEl : decompList) {

			//get Name of current directory
			
			
			//read Manifest
			ReadFile test= new ReadFile();
			String manifestData= "";
			try {
				File pathToManifestData = new File(resultDirectory+File.separator+apkName+File.separator);
				manifestData = test.readFileAsString(pathToManifestData);
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			//get package
			ParseManifest getManifestInfo = new ParseManifest(manifestData);
			Path packagePath = getManifestInfo.toSmaliPackage(currEl.toPath());
			
			//save SmaliData
			SmaliData smaliInfo = new SmaliData(packagePath);
			
			//save as apk
			ApkFiles apkData = new ApkFiles(currEl,getManifestInfo, smaliInfo);
			Apks.put(currEl.getName(), apkData);
			
			System.out.println("\n\n--->apk:"+Apks);
		
		}
		
		
		
		}
	}
}
